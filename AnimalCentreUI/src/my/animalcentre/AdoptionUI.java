/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.animalcentre;

import animalcentre.Adoption;
import animalcentre.AdoptionManagerImpl;
import animalcentre.Animal;
import animalcentre.AnimalManagerImpl;
import animalcentre.Customer;
import animalcentre.CustomerManagerImpl;
import animalcentre.DBstuff;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.ConsoleHandler;
import java.util.logging.FileHandler;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.sql.DataSource;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;

/**
 *
 * @author blurry
 */
public class AdoptionUI extends javax.swing.JDialog {

    private List<Animal> myAnimals;
    private List<Customer> myCustomers;
    private List<Adoption> myAdoptions;
    private DataSource dataSource;
    private static Logger logger;
    //private FileHandler fh;

    /**
     * Creates new form NewAdoption
     */
    public AdoptionUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    AdoptionUI(FileHandler fh, final DataSource dataSource) {

        logger = Logger.getLogger(AnimCentrUI.class.getName());
       
        /*logger.setUseParentHandlers(false);
        
        Handler[] handlers = logger.getHandlers();
        for (Handler handler : handlers) {
            if (handler.getClass() == ConsoleHandler.class) {
                logger.removeHandler(handler);
            }
        } */

        //logger.setUseParentHandlers(false);
        logger.addHandler(fh);
        SimpleFormatter formatter = new SimpleFormatter();
        fh.setFormatter(formatter);
        
        this.dataSource = dataSource;
        initComponents();
        setCombos();
        
        UIManager.put("OptionPane.yesButtonText", LanguageWizard.getString("yes"));
        UIManager.put("OptionPane.noButtonText", LanguageWizard.getString("no"));

        try {
            populateAnimalCustomer(dataSource);
        } catch (SQLException ex) {
            logger.log(Level.SEVERE, "Could not populate lists in AdoptionUI", ex);
        }
        populateAdoption(dataSource);

        textFieldAnimal.setText("");
        textFieldCustomer.setText("");

        //when clicked on adoption shows animal and customer in fields
        listAdoption.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {

                Rectangle r = listAdoption.getCellBounds(0, listAdoption.getLastVisibleIndex());
                if (r != null && r.contains(evt.getPoint())) {
                    String adoptionS = listAdoption.getSelectedValue().toString();
                    long id = getID(adoptionS);

                    AdoptionManagerImpl managAdopt = new AdoptionManagerImpl(dataSource);
                    Adoption adoption = managAdopt.getAdoptionByID(id);
                    textFieldAnimal.setText(adoption.getAnimal().toString());
                    textFieldCustomer.setText(adoption.getCustomer().toString());
                }
            }
        });
        
         // for logging uncaught exceptions
                Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
                    public void uncaughtException(Thread t, Throwable e) {
                        logger.log(Level.SEVERE, "Uncaught Exception in thread '" + t.getName() + "'", e);
                        System.exit(1);
                    }
                });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listAdoption = new javax.swing.JList();
        buttonEdit = new javax.swing.JButton();
        buttonRemove = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listAnimal = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listCustomer = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        labelDateAdoption = new javax.swing.JLabel();
        labelDateReturn = new javax.swing.JLabel();
        comboDateAdoptionDay = new javax.swing.JComboBox();
        comboDateAdoptionMonth = new javax.swing.JComboBox();
        comboDateAdoptionYear = new javax.swing.JComboBox();
        comboDateReturnMonth = new javax.swing.JComboBox();
        comboDateReturnYear = new javax.swing.JComboBox();
        labelDay = new javax.swing.JLabel();
        labelMonth = new javax.swing.JLabel();
        labelYear = new javax.swing.JLabel();
        comboDateReturnDay = new javax.swing.JComboBox();
        buttonClear = new javax.swing.JButton();
        buttonAdd = new javax.swing.JButton();
        labelAnimal = new javax.swing.JLabel();
        labelCustomer = new javax.swing.JLabel();
        textFieldAnimal = new javax.swing.JTextField();
        textFieldCustomer = new javax.swing.JTextField();

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, LanguageWizard.getString("Adoption"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Consolas", 1, 12))); // NOI18N

        listAdoption.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(listAdoption);

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("Main/resources/Bundle"); // NOI18N
        buttonEdit.setText(bundle.getString("EDIT")); // NOI18N
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        buttonRemove.setText(bundle.getString("REMOVE")); // NOI18N
        buttonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(266, Short.MAX_VALUE)
                .addComponent(buttonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane3)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonRemove)
                    .addComponent(buttonEdit)))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, LanguageWizard.getString("Animal"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Consolas", 1, 12))); // NOI18N

        listAnimal.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listAnimal);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, LanguageWizard.getString("Customer"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Consolas", 1, 12))); // NOI18N

        listCustomer.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(listCustomer);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, LanguageWizard.getString("adoptionCreate"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Consolas", 1, 12))); // NOI18N

        labelDateAdoption.setText(bundle.getString("DATE OF ADOPTION:")); // NOI18N

        labelDateReturn.setText(bundle.getString("DATE OF RETURN:")); // NOI18N

        labelDay.setText(bundle.getString("DAY:")); // NOI18N

        labelMonth.setText(bundle.getString("MONTH:")); // NOI18N

        labelYear.setText(bundle.getString("YEAR:")); // NOI18N

        buttonClear.setActionCommand(bundle.getString("CLEAR")); // NOI18N
        buttonClear.setLabel(bundle.getString("CLEAR")); // NOI18N
        buttonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(labelDateReturn))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                                .addComponent(labelDateAdoption)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboDateReturnDay, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comboDateAdoptionDay, 0, 58, Short.MAX_VALUE)))
                    .addComponent(labelDay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comboDateAdoptionMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelMonth))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comboDateAdoptionYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelYear)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(comboDateReturnMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(comboDateReturnYear, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(buttonClear))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {comboDateAdoptionDay, comboDateAdoptionMonth, comboDateAdoptionYear, comboDateReturnMonth, comboDateReturnYear});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(comboDateAdoptionDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelDateAdoption)))
                        .addGroup(jPanel4Layout.createSequentialGroup()
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(labelMonth)
                                .addComponent(labelDay))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(comboDateAdoptionMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(labelYear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboDateAdoptionYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDateReturn)
                    .addComponent(comboDateReturnMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboDateReturnYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboDateReturnDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonClear))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        buttonAdd.setText(bundle.getString("ADD")); // NOI18N
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(buttonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(buttonAdd)
                .addContainerGap())
        );

        jPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPanel1, jPanel2});

        labelAnimal.setText(bundle.getString("ANIMAL:")); // NOI18N

        labelCustomer.setText(bundle.getString("CUSTOMER:")); // NOI18N

        textFieldAnimal.setText(bundle.getString("JTEXTFIELD1")); // NOI18N

        textFieldCustomer.setText(bundle.getString("JTEXTFIELD2")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(92, 92, 92)
                                .addComponent(labelCustomer))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(107, 107, 107)
                                .addComponent(labelAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(textFieldAnimal, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                            .addComponent(textFieldCustomer))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(51, 51, 51))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(textFieldAnimal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(labelAnimal)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelCustomer)
                            .addComponent(textFieldCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        labelAnimal.getAccessibleContext().setAccessibleName("Animal");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonClearActionPerformed
        resetAndUnselectCombos();
    }//GEN-LAST:event_buttonClearActionPerformed

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        getAdoption();

        if (evt.getSource() == buttonAdd) {
            DefaultListModel listModel = (DefaultListModel) listAdoption.getModel();
            listModel.removeAllElements();
            
            populateAdoption(dataSource);
        }

        //resetAndUnselectCombos();
    }//GEN-LAST:event_buttonAddActionPerformed

    private void buttonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveActionPerformed
        if (listAdoption.getSelectedValue() != null) {

            String selected = listAdoption.getSelectedValue().toString();
            Long id = getID(selected);

            AdoptionManagerImpl manag = new AdoptionManagerImpl(dataSource);
            Adoption adopt = manag.getAdoptionByID(id);

            int reply = JOptionPane.showConfirmDialog(null, LanguageWizard.getString("Are_you_sure"), LanguageWizard.getString("Confirm"), JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {

                manag.deleteAdoption(adopt);
                logger.log(Level.INFO, "Adoption removed: {0}", adopt);

                if (evt.getSource() == buttonRemove) {
                    DefaultListModel listModel = (DefaultListModel) listAdoption.getModel();
                    listModel.removeAllElements();
                    
                    populateAdoption(dataSource);
                }

            }
        }
    }//GEN-LAST:event_buttonRemoveActionPerformed

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        if (listAdoption.getSelectedValue() != null) {
            
            String selected = listAdoption.getSelectedValue().toString();
            Long id = getID(selected);

            AdoptionManagerImpl managAdopt = new AdoptionManagerImpl(dataSource);
            Adoption adopt = managAdopt.getAdoptionByID(id);
            
            AdoptionEditUI adoptEdit = new AdoptionEditUI(adopt, dataSource, logger);
            adoptEdit.setVisible(true);
            adoptEdit.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

            //will refresh the Adoption list once the "Edit adoption" window is closed
            adoptEdit.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    
                        DefaultListModel listModel = (DefaultListModel) listAdoption.getModel();
                        listModel.removeAllElements();
                        populateAdoption(dataSource);
                    
                }
            }); 
        }
    }//GEN-LAST:event_buttonEditActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (java.util.ResourceBundle.getBundle("Main/resources/Bundle").getString("NIMBUS").equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdoptionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdoptionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdoptionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdoptionUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AdoptionUI dialog = new AdoptionUI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
        
    }

    private void setCombos() {
        comboDateAdoptionYear.setModel(new AnimalUI.DateModel());
        comboDateAdoptionYear.setSelectedIndex(0);

        comboDateReturnYear.setModel(new AnimalUI.DateModel());
        comboDateReturnYear.setSelectedIndex(-1);

        comboDateAdoptionMonth.setModel(new MonthModel());
        comboDateAdoptionMonth.setSelectedIndex(0);

        comboDateReturnMonth.setModel(new MonthModel());
        comboDateReturnMonth.setSelectedIndex(-1);

        comboDateAdoptionDay.setModel(new DayModel());
        comboDateAdoptionDay.setSelectedIndex(0);

        comboDateReturnDay.setModel(new DayModel());
        comboDateReturnDay.setSelectedIndex(-1);
    }

    private void populateAnimalCustomer(DataSource dataSource) throws SQLException {
        DefaultListModel modelAnim = new DefaultListModel(); //create a new list model
        DefaultListModel modelCustom = new DefaultListModel();

        AnimalManagerImpl managerAnim = new AnimalManagerImpl(dataSource);
        myAnimals = new ArrayList<>(managerAnim.findAllAnimals());

        CustomerManagerImpl managerCustom = new CustomerManagerImpl(dataSource);
        myCustomers = new ArrayList<>(managerCustom.findAllCustomers());

        for (Animal animal : myAnimals) {
            String itemCode = animal.toString(); 
            modelAnim.addElement(itemCode); 
        }
        listAnimal.setModel(modelAnim);

        for (Customer customer : myCustomers) {
            String itemCode = customer.toString(); 
            modelCustom.addElement(itemCode); 
        }
        listCustomer.setModel(modelCustom);

    }
    
    private void populateAdoption(DataSource dataSource){
        DefaultListModel modelAdopt = new DefaultListModel();
        
        AdoptionManagerImpl managerAdopt = new AdoptionManagerImpl(dataSource);
        myAdoptions = new ArrayList<>(managerAdopt.findAllAdoptions());
        
        for (Adoption adoption : myAdoptions) {
            String itemCode = adoption.toString(); 
            modelAdopt.addElement(itemCode); 
        }
        listAdoption.setModel(modelAdopt);
                
    }

    private long getID(String string) {

        String stringID = string.substring(string.indexOf("[")+1, string.lastIndexOf("]"));
        Long id = (long) Integer.parseInt(stringID);

        return id;
    }
    
    private boolean isCurrentlyAdopted(Animal animal){
        AdoptionManagerImpl manag = new AdoptionManagerImpl(dataSource);
        List<Adoption> allAdoptions = manag.findAllAdoptionsOfAnimal(animal);
        
        for(Adoption adoption : allAdoptions){
            if (adoption.getDateOfReturn() == null)
                return true;
        }
        return false;
    }

    private boolean isDateValid(Date date) {
        Calendar cal = Calendar.getInstance();
        try {
            cal.setTime(date);
        } catch (Exception e) {
            return false;
        }
        return true;
    }

     public final boolean isInvalidFormat(final String date) {
        String[] formatStrings = {"dd/MM/yyyy"};
        boolean isInvalidFormat = false;
        Date dateObj;
        for (String formatString : formatStrings) {
            try {
                SimpleDateFormat sdf = (SimpleDateFormat) DateFormat.getDateInstance();
                sdf.applyPattern(formatString);
                sdf.setLenient(false);
                dateObj = sdf.parse(date);

                if (date.equals(sdf.format(dateObj))) {
                    isInvalidFormat = false;
                    break;
                }
            } catch (ParseException e) {
                isInvalidFormat = true;
            }
        }
        return isInvalidFormat;
    }
    

    private Date formDate(String day, String month, String year) {
        String date;
        Date result = null;
        if (Integer.parseInt(day) < 10) {
            date = "0" + day;
        } else {
            date = day;
        }
        if (Integer.parseInt(month) < 10) {
            date += "/0" + month;
        } else {
            date += "/" + month;
        }
        date += "/" + year;

        if (!isInvalidFormat(date)) {
            try {
                result = new SimpleDateFormat("dd/MM/yyyy").parse(date);
            } catch (ParseException ex) {
                return null;
            }
        }
        return result;
    }

    private void resetAndUnselectCombos() {
        comboDateReturnYear.setSelectedIndex(-1);
        comboDateReturnMonth.setSelectedIndex(-1);
        comboDateReturnDay.setSelectedIndex(-1);

        comboDateAdoptionYear.setSelectedIndex(0);
        comboDateAdoptionMonth.setSelectedIndex(0);
        comboDateAdoptionDay.setSelectedIndex(0);
    }

    public Adoption getAdoption() {

        if (listAnimal.getSelectedValue() == null || listCustomer.getSelectedValue() == null) {
            JOptionPane.showMessageDialog(new JFrame(LanguageWizard.getString("Message")), LanguageWizard.getString("Please_select_an_animal_and_customer"));
        } else {

            AnimalManagerImpl managerAnim = new AnimalManagerImpl(dataSource);
            CustomerManagerImpl managerCustom = new CustomerManagerImpl(dataSource);
            AdoptionManagerImpl managerAdopt = new AdoptionManagerImpl(dataSource);

            Animal animal;
            Customer customer;
            Adoption adoption = new Adoption();

            String selectedA = listAnimal.getSelectedValue().toString();
            animal = managerAnim.getAnimalByID(getID(selectedA));
            adoption.setAnimal(animal);
            
            if (isCurrentlyAdopted(animal)) {
                JOptionPane.showMessageDialog(new JFrame(LanguageWizard.getString("Message")), LanguageWizard.getString("Animal_currently_adopted"));
                return null;
            }

            String selectedC = listCustomer.getSelectedValue().toString();
            customer = managerCustom.getCustomerByID(getID(selectedC));
            adoption.setCustomer(customer);

            String day = String.valueOf(comboDateAdoptionDay.getSelectedItem());
            String month = String.valueOf(comboDateAdoptionMonth.getSelectedItem());
            String year = String.valueOf(comboDateAdoptionYear.getSelectedItem());

            Date date1 = formDate(day, month, year);

            if (date1 == null) {
                JOptionPane.showMessageDialog(new JFrame(LanguageWizard.getString("Message")), LanguageWizard.getString("Invalid_date_adoption"));
            } else {
                if (isDateValid(date1)) {
                    adoption.setDateOfAdoption(date1);

                    if (comboDateReturnDay.getSelectedItem() == null && comboDateReturnMonth.getSelectedItem() == null && comboDateReturnYear.getSelectedItem() == null) {
                        adoption.setDateOfReturn(null);
                    } else {
                        if (comboDateReturnDay.getSelectedItem() == null || comboDateReturnMonth.getSelectedItem() == null || comboDateReturnYear.getSelectedItem() == null) {
                            JOptionPane.showMessageDialog(new JFrame(LanguageWizard.getString("Message")), LanguageWizard.getString("Date_return_null_set"));
                            return null;
                        } else {

                            String dayR = String.valueOf(comboDateReturnDay.getSelectedItem());
                            String monthR = String.valueOf(comboDateReturnMonth.getSelectedItem());
                            String yearR = String.valueOf(comboDateReturnYear.getSelectedItem());

                            Date date2 = formDate(dayR, monthR, yearR);
                            if (date2 == null) {
                                JOptionPane.showMessageDialog(new JFrame(LanguageWizard.getString("Message")), LanguageWizard.getString("Invalid_date_return"));
                                return null;
                            } else {
                                if (isDateValid(date2)) {
                                    adoption.setDateOfReturn(date2);
                                } else {
                                    JOptionPane.showMessageDialog(new JFrame(LanguageWizard.getString("Message")), LanguageWizard.getString("Invalid_date_return"));
                                    return null;
                                }
                                
                                if (date2.before(date1)) {
                                    JOptionPane.showMessageDialog(new JFrame(LanguageWizard.getString("Message")), LanguageWizard.getString("Invalid_date_before"));
                                    return null;
                                }

                                if (adoption == null) {
                                    JOptionPane.showMessageDialog(new JFrame(LanguageWizard.getString("Message")), LanguageWizard.getString("can_NOT_be_null")); // ??
                                    throw new IllegalArgumentException(LanguageWizard.getString("can_NOT_be_null"));
                                }
                            }
                        }
                    }

                    managerAdopt.createAdoption(adoption);
                    logger.log(Level.INFO, "Adoption added: {0}", adoption);
                    return adoption;

                } else {
                    JOptionPane.showMessageDialog(new JFrame(LanguageWizard.getString("Message")), LanguageWizard.getString("Invalid_date_adoption"));
                }

            }
        }

        return null;
    }

    static class DayModel extends DefaultComboBoxModel {

        List<Integer> comboBoxItemList = new ArrayList<Integer>();

        public DayModel() {
            for (int i = 1; i < 32; i++) {
                comboBoxItemList.add(i);
            }
        }

        @Override
        public Object getElementAt(int index) {
            return comboBoxItemList.get(index);
        }

        @Override
        public int getSize() {
            return comboBoxItemList.size();
        }
    }

    static class MonthModel extends DefaultComboBoxModel {

        List<Integer> comboBoxItemList = new ArrayList<Integer>();

        public MonthModel() {
            for (int i = 1; i < 13; i++) {
                comboBoxItemList.add(i);
            }
        }

        @Override
        public Object getElementAt(int index) {
            return comboBoxItemList.get(index);
        }

        @Override
        public int getSize() {
            return comboBoxItemList.size();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonClear;
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonRemove;
    private javax.swing.JComboBox comboDateAdoptionDay;
    private javax.swing.JComboBox comboDateAdoptionMonth;
    private javax.swing.JComboBox comboDateAdoptionYear;
    private javax.swing.JComboBox comboDateReturnDay;
    private javax.swing.JComboBox comboDateReturnMonth;
    private javax.swing.JComboBox comboDateReturnYear;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelAnimal;
    private javax.swing.JLabel labelCustomer;
    private javax.swing.JLabel labelDateAdoption;
    private javax.swing.JLabel labelDateReturn;
    private javax.swing.JLabel labelDay;
    private javax.swing.JLabel labelMonth;
    private javax.swing.JLabel labelYear;
    private javax.swing.JList listAdoption;
    private javax.swing.JList listAnimal;
    private javax.swing.JList listCustomer;
    private javax.swing.JTextField textFieldAnimal;
    private javax.swing.JTextField textFieldCustomer;
    // End of variables declaration//GEN-END:variables
}
